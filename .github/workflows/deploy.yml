name: CI/CD for Go Application

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE: hoangvangioi/cicd-go
  CONTAINER_NAME: cicd-go
  PORT: 8080

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t hoangvangioi/cicd-go:latest .

      - name: Push Docker Image to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push hoangvangioi/cicd-go:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Install Docker if not exists
            if ! command -v docker &> /dev/null; then
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker ubuntu
              sudo systemctl enable docker
              sudo systemctl start docker
            fi

            # Pull latest image
            sudo docker pull ${{ env.DOCKER_IMAGE }}:latest

            # Stop and remove old container
            sudo docker stop ${{ env.CONTAINER_NAME }} || true
            sudo docker rm ${{ env.CONTAINER_NAME }} || true

            # Run new container with healthcheck
            sudo docker run --name ${{ env.CONTAINER_NAME }} \
              -p ${{ env.PORT }}:${{ env.PORT }} \
              --restart unless-stopped \
              --health-cmd="curl -f http://localhost:${{ env.PORT }}/health || exit 1" \
              --health-interval=30s \
              --health-timeout=10s \
              --health-retries=3 \
              -d ${{ env.DOCKER_IMAGE }}:latest

            # Clean up old images
            sudo docker image prune -f